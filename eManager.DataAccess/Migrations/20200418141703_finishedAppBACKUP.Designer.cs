// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eManager.DataAccess;

namespace eManager.DataAccess.Migrations
{
    [DbContext(typeof(ManagerDbContext))]
    [Migration("20200418141703_finishedAppBACKUP")]
    partial class finishedAppBACKUP
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("eManager.Domain.Activity", b =>
                {
                    b.Property<int>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityStatus");

                    b.Property<int?>("ClientId");

                    b.Property<string>("ClientName");

                    b.Property<int>("ClientSelected");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<double>("Duration");

                    b.Property<string>("UserId");

                    b.HasKey("ActivityId");

                    b.HasIndex("ClientId");

                    b.HasIndex("UserId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("eManager.Domain.ActivityEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityId");

                    b.Property<int>("EmployeeId");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ActivityId", "EmployeeId");

                    b.ToTable("EmployeeActivities");
                });

            modelBuilder.Entity("eManager.Domain.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<long>("BankAccount");

                    b.Property<int?>("ClientInvoiceId");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<int>("InvoiceId");

                    b.Property<string>("LogoImage");

                    b.Property<string>("Name");

                    b.Property<long>("Phone");

                    b.Property<long>("TaxNumber");

                    b.HasKey("Id");

                    b.HasIndex("ClientInvoiceId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("eManager.Domain.ClientInvoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId");

                    b.Property<int>("Invoice_Id");

                    b.Property<int?>("ServiceId");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("Invoice_Id", "ClientId");

                    b.ToTable("ClientInvoices");
                });

            modelBuilder.Entity("eManager.Domain.ClientServiceDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("InvoiceId");

                    b.Property<int>("ServiceId");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("InvoiceId", "ServiceId");

                    b.ToTable("InvoiceServices");
                });

            modelBuilder.Entity("eManager.Domain.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<long>("BankAccount");

                    b.Property<string>("ContactPerson");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<long>("Phone");

                    b.Property<long>("TaxNumber");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("eManager.Domain.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActivityId");

                    b.Property<string>("Address");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<int>("Department");

                    b.Property<string>("EmployeeNumber");

                    b.Property<string>("FirstName");

                    b.Property<string>("HSafety");

                    b.Property<string>("IdCard");

                    b.Property<string>("LastName");

                    b.Property<string>("M1M2");

                    b.Property<string>("Medical");

                    b.Property<string>("Password");

                    b.Property<long>("Phone");

                    b.Property<long>("Salary");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("eManager.Domain.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClientAddress");

                    b.Property<int>("ClientId");

                    b.Property<int?>("ClientId1");

                    b.Property<int?>("ClientInvoiceId");

                    b.Property<string>("ClientName");

                    b.Property<string>("Description");

                    b.Property<DateTime>("DueDate");

                    b.Property<DateTime>("InvoiceDate");

                    b.Property<string>("InvoiceNumber");

                    b.Property<double>("PaymentPeriod");

                    b.Property<double>("Price");

                    b.Property<string>("UserId");

                    b.HasKey("InvoiceId");

                    b.HasIndex("ClientId1");

                    b.HasIndex("ClientInvoiceId");

                    b.HasIndex("UserId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("eManager.Domain.Procurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<string>("Issuer");

                    b.Property<double>("Price");

                    b.Property<int>("ProcurementStatus");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Procurements");
                });

            modelBuilder.Entity("eManager.Domain.ProcurementProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProcurementId");

                    b.Property<int>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("ProcurementId");

                    b.HasIndex("ProductId", "ProcurementId");

                    b.ToTable("ProcurementProducts");
                });

            modelBuilder.Entity("eManager.Domain.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("Name");

                    b.Property<double>("Price");

                    b.Property<int>("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("eManager.Domain.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId");

                    b.Property<int>("Currency");

                    b.Property<double>("CurrencyRate");

                    b.Property<string>("Name");

                    b.Property<double>("Price");

                    b.Property<double>("Quantity");

                    b.HasKey("ServiceId");

                    b.HasIndex("ClientId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("eManager.Domain.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FullName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new { Id = "a4a60e76-1303-4459-9261-67b851474db0", AccessFailedCount = 0, ConcurrencyStamp = "45124bca-8d8a-4e16-8be3-9d51bb04a8fb", Email = "supplier@mail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "supplier@mail.com", NormalizedUserName = "OGNO2020", PasswordHash = "AQAAAAEAACcQAAAAEFZV4i7fAzMENfxWcOLeDlLHomVWZ3ScLt0BVX61ER288W/CLMlButMrwZLN6NBf4Q==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "ogno2020" },
                        new { Id = "af876711-298e-4c84-8dd5-1a5eef2eaa4c", AccessFailedCount = 0, ConcurrencyStamp = "cc8beb11-384f-47d0-b7bf-0ed9a09f740d", Email = "planojevic@ognootporno.com.mk", EmailConfirmed = true, FullName = "Владимир Планојевиќ", LockoutEnabled = false, NormalizedEmail = "PLANOJEVIC@OGNOOTPORNO.COM.MK", NormalizedUserName = "VPLAN", PasswordHash = "AQAAAAEAACcQAAAAEGkI6GQe0OcMHYgmF5+Bm9J5e+9sdm7tURcXR9YloTLZzKH3Q1TV+IJlMGPYsFezVw==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "VPlan" },
                        new { Id = "b3743bbd-a69f-401b-8b87-3962d7a9f1a8", AccessFailedCount = 0, ConcurrencyStamp = "b96f503d-a59c-44fc-b103-2dea88cc9f0c", Email = "nikolchov@ognootporno.com.mk", EmailConfirmed = true, FullName = "Сашо Николчов", LockoutEnabled = false, NormalizedEmail = "nikolchov@ognootporno.com.mk", NormalizedUserName = "SASHONIKOLCHOV", PasswordHash = "AQAAAAEAACcQAAAAEA6g0KYBw42rLAY7lo8nmR0TOBlsMl5ZOXLgIPO1zx9+L4NYTgcaYmeVQpOoc+w9fg==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "SashoNikolchov" },
                        new { Id = "740c079e-bca4-4a4f-a0ef-5021cab0b0fe", AccessFailedCount = 0, ConcurrencyStamp = "3f02f56e-4372-4fd9-85e1-490c5e5eed55", Email = "peshovski@ognootporno.com.mk", EmailConfirmed = true, FullName = "Тони Пешевски", LockoutEnabled = false, NormalizedEmail = "peshovski@ognootporno.com.mk", NormalizedUserName = "TONIPESHEVSKI", PasswordHash = "AQAAAAEAACcQAAAAEICbu27pRRMxWzzz5cNMEEn/dRca3qkxojCz5Q1tLqWXuniPtEoE4gXDflS0xt+izA==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "ToniPeshevski" },
                        new { Id = "ef7a1828-e219-42cc-b881-547e5a85acb0", AccessFailedCount = 0, ConcurrencyStamp = "5efffe13-84dd-4e55-9ad1-2490b2126dd8", Email = "mirkovska@ognootporno.com.mk", EmailConfirmed = true, FullName = "Ана Мирковска Гаврилов", LockoutEnabled = false, NormalizedEmail = "mirkovska@ognootporno.com.mk", NormalizedUserName = "ANAMIRKOVSKAGAVRILOV", PasswordHash = "AQAAAAEAACcQAAAAEOWQBC4OA4H73SIWzlPFmCyXBqxO/fgOUCHXS/A95cT7pjMqTWGI02x8dHzCORaulA==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "AnaMGavrilov" },
                        new { Id = "05fd744b-0ab2-4877-bd83-4f2298029991", AccessFailedCount = 0, ConcurrencyStamp = "a4112e30-b24f-41f8-97e7-f459729f539c", Email = "nikolchov@ognootporno.com.mk", EmailConfirmed = true, FullName = "Евтим Николчов", LockoutEnabled = false, NormalizedEmail = "nikolchov@ognootporno.com.mk", NormalizedUserName = "EVTIMNIKOLCHOV", PasswordHash = "AQAAAAEAACcQAAAAEPzpg61A5sUGw7SOGkJezTRShT9dSO4GkjCMusDaCdSn/sfb2ImzfLATknAGlkKefQ==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "EvtimNikolchov" },
                        new { Id = "7e8b0400-bf7d-4b82-8529-c34c4db933af", AccessFailedCount = 0, ConcurrencyStamp = "0053e724-6605-4676-a9b0-5a9725f721f9", Email = "peshovski@ognootporno.com.mk", EmailConfirmed = true, FullName = "Сашо Пешовски", LockoutEnabled = false, NormalizedEmail = "peshovski@ognootporno.com.mk", NormalizedUserName = "SASHOPESHOVSKI", PasswordHash = "AQAAAAEAACcQAAAAEJa604tDxwEK6hDgs8jttMP7mu16NglGB7mRuMycdV6tF++FrUuY6n+g+h2Dcp9UDA==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "SashoPeshovski" },
                        new { Id = "e9204fc7-a98f-40be-8fc1-4efdafa56da7", AccessFailedCount = 0, ConcurrencyStamp = "f29bc8fb-9b58-4f19-8271-14e758822d16", Email = "kotev@ognootporno.com.mk", EmailConfirmed = true, FullName = "Горан Котев", LockoutEnabled = false, NormalizedEmail = "kotev@ognootporno.com.mk", NormalizedUserName = "GORANKOTEV", PasswordHash = "AQAAAAEAACcQAAAAEDRz0wUkkf661sO9gDsxzEZOlFCahC+iACH4hDJrmePgFCa0g7vG8k5Y7NvntzdSxQ==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "GoranKotev" },
                        new { Id = "60a13b30-65f3-48a2-a34c-88a818f3f9c8", AccessFailedCount = 0, ConcurrencyStamp = "5b3501fd-24b5-4e44-b720-6a5166fbef78", Email = "kotev@ognootporno.com.mk", EmailConfirmed = true, FullName = "Коста Котев", LockoutEnabled = false, NormalizedEmail = "kotev@ognootporno.com.mk", NormalizedUserName = "KOSTAKOTEV", PasswordHash = "AQAAAAEAACcQAAAAEF6+CinqRExg/gOKvWmhbAZVfps/Qg4ddCXVAaSDLl507ibATbMPU7fzy+m4x6RMhg==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "KostaKotev" },
                        new { Id = "47fc68ef-6f43-4d48-b360-f9c9851b4b53", AccessFailedCount = 0, ConcurrencyStamp = "b7566e4e-834c-409e-bc5e-8f25b2dc1ba0", Email = "kotev@ognootporno.com.mk", EmailConfirmed = true, FullName = "Драге Ристевски", LockoutEnabled = false, NormalizedEmail = "kotev@ognootporno.com.mk", NormalizedUserName = "DRAGERISTEVSKI", PasswordHash = "AQAAAAEAACcQAAAAECiNYZiaR+UpignrD8xOVaUcUNE493Ds1Qj6df6KLRs14+zujXfNv+WTSizm3HRRbA==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "DrageRistevski" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new { Id = "00967429-1b84-4881-bf36-715154e3acaa", ConcurrencyStamp = "a47af132-6d79-4444-8e23-3a41a5863edc", Name = "admin", NormalizedName = "ADMIN" },
                        new { Id = "f99f3c4d-8c06-4afc-9042-ca1a697449ce", ConcurrencyStamp = "54f4278f-2d1d-4a21-8585-fb324250749c", Name = "userVP", NormalizedName = "USERVP" },
                        new { Id = "4566f3dc-33e3-4fad-8060-5d6b3d630ede", ConcurrencyStamp = "e7a084db-07c4-4cdb-9374-9f51b4d9ab82", Name = "userSN", NormalizedName = "USERSN" },
                        new { Id = "75defc02-8b05-46ec-8449-ed64bd5141e6", ConcurrencyStamp = "2c822646-10a2-46ac-a6ec-2953ae816ab2", Name = "userTP", NormalizedName = "USERTP" },
                        new { Id = "09def062-c59b-4dd9-b490-39f4e6fc22b6", ConcurrencyStamp = "63e92057-0225-4ef1-9869-faace8247d86", Name = "userAMG", NormalizedName = "USERAMG" },
                        new { Id = "263e2430-9c1e-4d79-9a2b-103113cb62d0", ConcurrencyStamp = "ab4ae0c4-a06b-4f8f-8bda-88bd40f2b4a4", Name = "userEN", NormalizedName = "USEREN" },
                        new { Id = "d2460b08-b174-4fe3-b514-6ec438ab157b", ConcurrencyStamp = "26670f44-475e-42c5-a167-1a514273e605", Name = "userSP", NormalizedName = "USERSP" },
                        new { Id = "b8951702-d981-49de-a87c-ea927c8e7afe", ConcurrencyStamp = "3fc7e8e9-152e-4787-af01-6c77e1ce0f2d", Name = "userGK", NormalizedName = "USERGK" },
                        new { Id = "e765e497-766b-4308-ae00-d7a1126616d9", ConcurrencyStamp = "e13431c2-09ce-4408-93ab-d9e8f749f9ad", Name = "userKK", NormalizedName = "USERKK" },
                        new { Id = "e31b04e7-50d1-4fac-8373-93ce881b6502", ConcurrencyStamp = "7c38e765-dd1d-460d-a563-b89f13db4189", Name = "userDR", NormalizedName = "USERDR" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new { UserId = "a4a60e76-1303-4459-9261-67b851474db0", RoleId = "00967429-1b84-4881-bf36-715154e3acaa" },
                        new { UserId = "af876711-298e-4c84-8dd5-1a5eef2eaa4c", RoleId = "f99f3c4d-8c06-4afc-9042-ca1a697449ce" },
                        new { UserId = "b3743bbd-a69f-401b-8b87-3962d7a9f1a8", RoleId = "4566f3dc-33e3-4fad-8060-5d6b3d630ede" },
                        new { UserId = "740c079e-bca4-4a4f-a0ef-5021cab0b0fe", RoleId = "75defc02-8b05-46ec-8449-ed64bd5141e6" },
                        new { UserId = "ef7a1828-e219-42cc-b881-547e5a85acb0", RoleId = "09def062-c59b-4dd9-b490-39f4e6fc22b6" },
                        new { UserId = "05fd744b-0ab2-4877-bd83-4f2298029991", RoleId = "263e2430-9c1e-4d79-9a2b-103113cb62d0" },
                        new { UserId = "e9204fc7-a98f-40be-8fc1-4efdafa56da7", RoleId = "b8951702-d981-49de-a87c-ea927c8e7afe" },
                        new { UserId = "60a13b30-65f3-48a2-a34c-88a818f3f9c8", RoleId = "e765e497-766b-4308-ae00-d7a1126616d9" },
                        new { UserId = "47fc68ef-6f43-4d48-b360-f9c9851b4b53", RoleId = "e31b04e7-50d1-4fac-8373-93ce881b6502" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("eManager.Domain.Activity", b =>
                {
                    b.HasOne("eManager.Domain.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("eManager.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("eManager.Domain.ActivityEmployee", b =>
                {
                    b.HasOne("eManager.Domain.Activity", "Activity")
                        .WithMany("EmployeeActivities")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eManager.Domain.Employee", "Employee")
                        .WithMany("EmployeeActivities")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eManager.Domain.Client", b =>
                {
                    b.HasOne("eManager.Domain.ClientInvoice")
                        .WithMany("Clients")
                        .HasForeignKey("ClientInvoiceId");
                });

            modelBuilder.Entity("eManager.Domain.ClientInvoice", b =>
                {
                    b.HasOne("eManager.Domain.Client", "Client")
                        .WithMany("ClientInvoices")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eManager.Domain.Invoice", "Invoice")
                        .WithMany("ClientInvoices")
                        .HasForeignKey("Invoice_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eManager.Domain.Service")
                        .WithMany("ClientInvoices")
                        .HasForeignKey("ServiceId");
                });

            modelBuilder.Entity("eManager.Domain.ClientServiceDTO", b =>
                {
                    b.HasOne("eManager.Domain.Invoice", "Invoice")
                        .WithMany("InvoiceServices")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eManager.Domain.Service", "Service")
                        .WithMany("InvoiceServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eManager.Domain.Employee", b =>
                {
                    b.HasOne("eManager.Domain.Activity")
                        .WithMany("allEmployees")
                        .HasForeignKey("ActivityId");
                });

            modelBuilder.Entity("eManager.Domain.Invoice", b =>
                {
                    b.HasOne("eManager.Domain.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId1");

                    b.HasOne("eManager.Domain.ClientInvoice")
                        .WithMany("Invoices")
                        .HasForeignKey("ClientInvoiceId");

                    b.HasOne("eManager.Domain.User", "User")
                        .WithMany("Invoices")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("eManager.Domain.Procurement", b =>
                {
                    b.HasOne("eManager.Domain.User", "User")
                        .WithMany("Procurements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eManager.Domain.ProcurementProduct", b =>
                {
                    b.HasOne("eManager.Domain.Procurement", "Procurement")
                        .WithMany("ProcurementProducts")
                        .HasForeignKey("ProcurementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eManager.Domain.Product", "Product")
                        .WithMany("ProcurementProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eManager.Domain.Product", b =>
                {
                    b.HasOne("eManager.Domain.Company", "Company")
                        .WithMany("CompanyProducts")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eManager.Domain.Service", b =>
                {
                    b.HasOne("eManager.Domain.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("eManager.Domain.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("eManager.Domain.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eManager.Domain.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("eManager.Domain.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}

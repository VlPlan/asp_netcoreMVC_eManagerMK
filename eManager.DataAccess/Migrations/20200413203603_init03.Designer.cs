// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eManager.DataAccess;

namespace eManager.DataAccess.Migrations
{
    [DbContext(typeof(ManagerDbContext))]
    [Migration("20200413203603_init03")]
    partial class init03
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("eManager.Domain.Activity", b =>
                {
                    b.Property<int>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityStatus");

                    b.Property<int?>("ClientId");

                    b.Property<string>("ClientName");

                    b.Property<int>("ClientSelected");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<double>("Duration");

                    b.Property<string>("UserId");

                    b.HasKey("ActivityId");

                    b.HasIndex("ClientId");

                    b.HasIndex("UserId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("eManager.Domain.ActivityEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityId");

                    b.Property<int>("EmployeeId");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ActivityId", "EmployeeId");

                    b.ToTable("EmployeeActivities");
                });

            modelBuilder.Entity("eManager.Domain.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<long>("BankAccount");

                    b.Property<int?>("ClientInvoiceId");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<int>("InvoiceId");

                    b.Property<string>("LogoImage");

                    b.Property<string>("Name");

                    b.Property<long>("Phone");

                    b.Property<long>("TaxNumber");

                    b.HasKey("Id");

                    b.HasIndex("ClientInvoiceId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("eManager.Domain.ClientInvoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId");

                    b.Property<int>("Invoice_Id");

                    b.Property<int?>("ServiceId");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("Invoice_Id", "ClientId");

                    b.ToTable("ClientInvoices");
                });

            modelBuilder.Entity("eManager.Domain.ClientServiceDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("InvoiceId");

                    b.Property<int>("ServiceId");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("InvoiceId", "ServiceId");

                    b.ToTable("InvoiceServices");
                });

            modelBuilder.Entity("eManager.Domain.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<long>("BankAccount");

                    b.Property<string>("ContactPerson");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<long>("Phone");

                    b.Property<long>("TaxNumber");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("eManager.Domain.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActivityId");

                    b.Property<string>("Address");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<int>("Department");

                    b.Property<string>("EmployeeNumber");

                    b.Property<string>("FirstName");

                    b.Property<string>("HSafety");

                    b.Property<string>("IdCard");

                    b.Property<string>("LastName");

                    b.Property<string>("M1M2");

                    b.Property<string>("Medical");

                    b.Property<string>("Password");

                    b.Property<long>("Phone");

                    b.Property<long>("Salary");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("eManager.Domain.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClientAddress");

                    b.Property<int>("ClientId");

                    b.Property<int?>("ClientId1");

                    b.Property<int?>("ClientInvoiceId");

                    b.Property<string>("ClientName");

                    b.Property<string>("Description");

                    b.Property<DateTime>("DueDate");

                    b.Property<DateTime>("InvoiceDate");

                    b.Property<string>("InvoiceNumber");

                    b.Property<double>("PaymentPeriod");

                    b.Property<double>("Price");

                    b.Property<string>("UserId");

                    b.HasKey("InvoiceId");

                    b.HasIndex("ClientId1");

                    b.HasIndex("ClientInvoiceId");

                    b.HasIndex("UserId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("eManager.Domain.Procurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<string>("Issuer");

                    b.Property<double>("Price");

                    b.Property<int>("ProcurementStatus");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Procurements");
                });

            modelBuilder.Entity("eManager.Domain.ProcurementProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProcurementId");

                    b.Property<int>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("ProcurementId");

                    b.HasIndex("ProductId", "ProcurementId");

                    b.ToTable("ProcurementProducts");
                });

            modelBuilder.Entity("eManager.Domain.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("Name");

                    b.Property<double>("Price");

                    b.Property<int>("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("eManager.Domain.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId");

                    b.Property<int>("Currency");

                    b.Property<double>("CurrencyRate");

                    b.Property<string>("Name");

                    b.Property<double>("Price");

                    b.Property<double>("Quantity");

                    b.HasKey("ServiceId");

                    b.HasIndex("ClientId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("eManager.Domain.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FullName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new { Id = "5b95efe5-c35e-4910-a59a-d2844b6b63eb", AccessFailedCount = 0, ConcurrencyStamp = "28f4da12-df66-4ed6-ad8f-5d892766b6a1", Email = "supplier@mail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "supplier@mail.com", NormalizedUserName = "Ognootporno2020", PasswordHash = "AQAAAAEAACcQAAAAEATrBSlyseA3ZfhEKMcB8VaWfj0z1fFIM0xpaVfFc9MioErHwl5v/7bq3bMPSvnVJQ==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "ogno2020" },
                        new { Id = "0b8a0bc5-c6ab-46bb-823e-bd038e036569", AccessFailedCount = 0, ConcurrencyStamp = "61e8367d-e2bd-4e6b-955f-a1397047e93c", Email = "planojevic@ognootporno.com.mk", EmailConfirmed = true, FullName = "Владимир Планојевиќ", LockoutEnabled = false, NormalizedEmail = "PLANOJEVIC@OGNOOTPORNO.COM.MK", NormalizedUserName = "VPLAN", PasswordHash = "AQAAAAEAACcQAAAAEDhVKYbYud+JIWqhkIk9TR/PhnxQRo7IQbbOtYG0JaCN+KBGYsB69xJw0847iyDidg==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "VPlan" },
                        new { Id = "3e64e5bc-1a0e-4634-9da4-f199e30e2429", AccessFailedCount = 0, ConcurrencyStamp = "683d6043-90bc-4d17-bea7-f465b756394b", Email = "nikolchov@ognootporno.com.mk", EmailConfirmed = true, FullName = "Сашо Николчов", LockoutEnabled = false, NormalizedEmail = "nikolchov@ognootporno.com.mk", NormalizedUserName = "SASHONIKOLCHOV", PasswordHash = "AQAAAAEAACcQAAAAEDcXV96zVtEdnAMpA2Mw37AfeOtK69GymnqFtEsJzkNqSoGsg7K/nMe62xZu43U4/A==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "SashoNikolchov" },
                        new { Id = "37af963d-5907-4b78-89cb-460afe6fbec6", AccessFailedCount = 0, ConcurrencyStamp = "61e86d08-73f9-4113-8eb0-4c49e8e209c5", Email = "peshovski@ognootporno.com.mk", EmailConfirmed = true, FullName = "Тони Пешевски", LockoutEnabled = false, NormalizedEmail = "peshovski@ognootporno.com.mk", NormalizedUserName = "TONIPESHEVSKI", PasswordHash = "AQAAAAEAACcQAAAAEB/2WV86Ye/8kSErRm2VctcyJd/Y9VaY0CElfwt724iobZJCjIBJmW1rtcS4BI2T7w==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "ToniPeshevski" },
                        new { Id = "62144fd6-b509-4621-a1a5-515dfc3431ef", AccessFailedCount = 0, ConcurrencyStamp = "c1b3a07a-50ed-4371-a461-3a6a5fec70d4", Email = "mirkovska@ognootporno.com.mk", EmailConfirmed = true, FullName = "Ана Мирковска Гаврилов", LockoutEnabled = false, NormalizedEmail = "mirkovska@ognootporno.com.mk", NormalizedUserName = "ANAMIRKOVSKAGAVRILOV", PasswordHash = "AQAAAAEAACcQAAAAEMRB4qTGTzzvLFzf/cqKqt/rXhpod6fk+0JL3Cf8LKSkNbDox7R+pUnLmGCUCqsegA==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "AnaMGavrilov" },
                        new { Id = "cc0fbab5-0d34-4e23-8e6a-0f2c6f17a679", AccessFailedCount = 0, ConcurrencyStamp = "943008c6-d7b2-4d76-afcc-fc195c3ec6e9", Email = "nikolchov@ognootporno.com.mk", EmailConfirmed = true, FullName = "Евтим Николчов", LockoutEnabled = false, NormalizedEmail = "nikolchov@ognootporno.com.mk", NormalizedUserName = "EVTIMNIKOLCHOV", PasswordHash = "AQAAAAEAACcQAAAAEPf+ByElueV9netkkijYpMCoSRX9CZAL3HWdNdqf2aKBszbVihkC+vZ70y7aNWyxyQ==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "EvtimNikolchov" },
                        new { Id = "4037c44a-8aa7-4820-af6d-06815637547c", AccessFailedCount = 0, ConcurrencyStamp = "105dea6c-9db8-46ed-8c9f-e75259bd55f7", Email = "peshovski@ognootporno.com.mk", EmailConfirmed = true, FullName = "Сашо Пешовски", LockoutEnabled = false, NormalizedEmail = "peshovski@ognootporno.com.mk", NormalizedUserName = "SASHOPESHOVSKI", PasswordHash = "AQAAAAEAACcQAAAAEBvPtSm7A75a4fw/eDiw1Zgw6vt57nVvOSa0su9Tnx+IMKacGAINRMIyRGGJck5ELQ==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "SashoPeshovski" },
                        new { Id = "539080f8-ff27-4819-8b95-dd1a30d638a3", AccessFailedCount = 0, ConcurrencyStamp = "d487c323-6b81-455a-84f2-8f4463482368", Email = "kotev@ognootporno.com.mk", EmailConfirmed = true, FullName = "Горан Котев", LockoutEnabled = false, NormalizedEmail = "kotev@ognootporno.com.mk", NormalizedUserName = "GORANKOTEV", PasswordHash = "AQAAAAEAACcQAAAAEHHvpUaaMoJdasl/65/adCo/08Xcbqk6uKQ4S/LFxfHgQCJ64FeppSgsrTjMOqMP+Q==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "GoranKotev" },
                        new { Id = "5529b0e2-ac29-4eb1-bd0c-f3faada939e6", AccessFailedCount = 0, ConcurrencyStamp = "9e9c812b-3968-499c-bd71-668865d16938", Email = "kotev@ognootporno.com.mk", EmailConfirmed = true, FullName = "Коста Котев", LockoutEnabled = false, NormalizedEmail = "kotev@ognootporno.com.mk", NormalizedUserName = "KOSTAKOTEV", PasswordHash = "AQAAAAEAACcQAAAAEBZWYnSxva3qg7OQOzarTPfz8jhbZ3fkCa+ciHc8tvzUrq5391s8S+gbE8TeRFZW+w==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "KostaKotev" },
                        new { Id = "07c5dde5-b557-499e-ad8c-1c4af39754c6", AccessFailedCount = 0, ConcurrencyStamp = "2a5253cd-46f7-4e77-81b9-4f3eedcf3abe", Email = "kotev@ognootporno.com.mk", EmailConfirmed = true, FullName = "Драге Ристевски", LockoutEnabled = false, NormalizedEmail = "kotev@ognootporno.com.mk", NormalizedUserName = "DRAGERISTEVSKI", PasswordHash = "AQAAAAEAACcQAAAAEOA/fOZgMevCnpFQ3e5blGEXyn95HQIMglXUhIli3EGfuN2d3Z2uWYkfKO2hhAdjJQ==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "DrageRistevski" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new { Id = "a35a8d2d-6f91-43fb-9e9f-7162ffd82d09", ConcurrencyStamp = "12853cce-2aa2-4c26-8588-d382a51706fa", Name = "admin", NormalizedName = "ADMIN" },
                        new { Id = "4e972688-a34c-482d-a183-8d9129c2ff7f", ConcurrencyStamp = "fbfeb854-33cf-4e14-bb17-c902de6e06bc", Name = "userVP", NormalizedName = "USERVP" },
                        new { Id = "892da606-13d8-4138-a1db-ce9925b9e4ec", ConcurrencyStamp = "f318eed3-c309-402c-b4de-4624e0fdd905", Name = "userSN", NormalizedName = "USERSN" },
                        new { Id = "c8aff7fd-aa41-4972-b24d-cfde2586fc09", ConcurrencyStamp = "5d9a701f-92ae-490b-bd43-f4204771fcf3", Name = "userTP", NormalizedName = "USERTP" },
                        new { Id = "0be86b0a-f6ca-4c61-a2a4-9541ec6260ba", ConcurrencyStamp = "bdfe6d0e-5b4c-4215-8f52-d2d5c1c2c832", Name = "userAMG", NormalizedName = "USERAMG" },
                        new { Id = "27307d0b-103d-41e9-84ce-32d42b5a5f71", ConcurrencyStamp = "40f26696-447c-4aef-8261-ae636855a909", Name = "userEN", NormalizedName = "USEREN" },
                        new { Id = "833a0515-4258-40e0-92d1-8268b808e0c4", ConcurrencyStamp = "fec2e855-45d7-41b7-8c13-d5fa01199599", Name = "userSP", NormalizedName = "USERSP" },
                        new { Id = "c47c36b4-27b3-4e8e-abc7-40dfdf1850fc", ConcurrencyStamp = "e31c9397-aec6-4529-975d-af93186550df", Name = "userGK", NormalizedName = "USERGK" },
                        new { Id = "cdc8c629-27ad-44cb-b102-ede7b2aa386c", ConcurrencyStamp = "3c3b46bd-6c7f-4e99-bf4b-ca8855eb9c2d", Name = "userKK", NormalizedName = "USERKK" },
                        new { Id = "ee6c9d74-1c50-4539-a893-9d69b931e218", ConcurrencyStamp = "dee68415-802e-4ede-8bd5-dc8c1bd5f3c6", Name = "userDR", NormalizedName = "USERDR" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new { UserId = "5b95efe5-c35e-4910-a59a-d2844b6b63eb", RoleId = "a35a8d2d-6f91-43fb-9e9f-7162ffd82d09" },
                        new { UserId = "0b8a0bc5-c6ab-46bb-823e-bd038e036569", RoleId = "4e972688-a34c-482d-a183-8d9129c2ff7f" },
                        new { UserId = "3e64e5bc-1a0e-4634-9da4-f199e30e2429", RoleId = "892da606-13d8-4138-a1db-ce9925b9e4ec" },
                        new { UserId = "37af963d-5907-4b78-89cb-460afe6fbec6", RoleId = "c8aff7fd-aa41-4972-b24d-cfde2586fc09" },
                        new { UserId = "62144fd6-b509-4621-a1a5-515dfc3431ef", RoleId = "0be86b0a-f6ca-4c61-a2a4-9541ec6260ba" },
                        new { UserId = "cc0fbab5-0d34-4e23-8e6a-0f2c6f17a679", RoleId = "27307d0b-103d-41e9-84ce-32d42b5a5f71" },
                        new { UserId = "539080f8-ff27-4819-8b95-dd1a30d638a3", RoleId = "c47c36b4-27b3-4e8e-abc7-40dfdf1850fc" },
                        new { UserId = "5529b0e2-ac29-4eb1-bd0c-f3faada939e6", RoleId = "cdc8c629-27ad-44cb-b102-ede7b2aa386c" },
                        new { UserId = "07c5dde5-b557-499e-ad8c-1c4af39754c6", RoleId = "ee6c9d74-1c50-4539-a893-9d69b931e218" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("eManager.Domain.Activity", b =>
                {
                    b.HasOne("eManager.Domain.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("eManager.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("eManager.Domain.ActivityEmployee", b =>
                {
                    b.HasOne("eManager.Domain.Activity", "Activity")
                        .WithMany("EmployeeActivities")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eManager.Domain.Employee", "Employee")
                        .WithMany("EmployeeActivities")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eManager.Domain.Client", b =>
                {
                    b.HasOne("eManager.Domain.ClientInvoice")
                        .WithMany("Clients")
                        .HasForeignKey("ClientInvoiceId");
                });

            modelBuilder.Entity("eManager.Domain.ClientInvoice", b =>
                {
                    b.HasOne("eManager.Domain.Client", "Client")
                        .WithMany("ClientInvoices")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eManager.Domain.Invoice", "Invoice")
                        .WithMany("ClientInvoices")
                        .HasForeignKey("Invoice_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eManager.Domain.Service")
                        .WithMany("ClientInvoices")
                        .HasForeignKey("ServiceId");
                });

            modelBuilder.Entity("eManager.Domain.ClientServiceDTO", b =>
                {
                    b.HasOne("eManager.Domain.Invoice", "Invoice")
                        .WithMany("InvoiceServices")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eManager.Domain.Service", "Service")
                        .WithMany("InvoiceServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eManager.Domain.Employee", b =>
                {
                    b.HasOne("eManager.Domain.Activity")
                        .WithMany("allEmployees")
                        .HasForeignKey("ActivityId");
                });

            modelBuilder.Entity("eManager.Domain.Invoice", b =>
                {
                    b.HasOne("eManager.Domain.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId1");

                    b.HasOne("eManager.Domain.ClientInvoice")
                        .WithMany("Invoices")
                        .HasForeignKey("ClientInvoiceId");

                    b.HasOne("eManager.Domain.User", "User")
                        .WithMany("Invoices")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("eManager.Domain.Procurement", b =>
                {
                    b.HasOne("eManager.Domain.User", "User")
                        .WithMany("Procurements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eManager.Domain.ProcurementProduct", b =>
                {
                    b.HasOne("eManager.Domain.Procurement", "Procurement")
                        .WithMany("ProcurementProducts")
                        .HasForeignKey("ProcurementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eManager.Domain.Product", "Product")
                        .WithMany("ProcurementProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eManager.Domain.Product", b =>
                {
                    b.HasOne("eManager.Domain.Company", "Company")
                        .WithMany("CompanyProducts")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eManager.Domain.Service", b =>
                {
                    b.HasOne("eManager.Domain.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("eManager.Domain.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("eManager.Domain.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eManager.Domain.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("eManager.Domain.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}

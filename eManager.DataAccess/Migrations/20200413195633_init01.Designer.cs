// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eManager.DataAccess;

namespace eManager.DataAccess.Migrations
{
    [DbContext(typeof(ManagerDbContext))]
    [Migration("20200413195633_init01")]
    partial class init01
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("eManager.Domain.Activity", b =>
                {
                    b.Property<int>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityStatus");

                    b.Property<int?>("ClientId");

                    b.Property<string>("ClientName");

                    b.Property<int>("ClientSelected");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<double>("Duration");

                    b.Property<string>("UserId");

                    b.HasKey("ActivityId");

                    b.HasIndex("ClientId");

                    b.HasIndex("UserId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("eManager.Domain.ActivityEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityId");

                    b.Property<int>("EmployeeId");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ActivityId", "EmployeeId");

                    b.ToTable("EmployeeActivities");
                });

            modelBuilder.Entity("eManager.Domain.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<long>("BankAccount");

                    b.Property<int?>("ClientInvoiceId");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<int>("InvoiceId");

                    b.Property<string>("LogoImage");

                    b.Property<string>("Name");

                    b.Property<long>("Phone");

                    b.Property<long>("TaxNumber");

                    b.HasKey("Id");

                    b.HasIndex("ClientInvoiceId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("eManager.Domain.ClientInvoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId");

                    b.Property<int>("Invoice_Id");

                    b.Property<int?>("ServiceId");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("Invoice_Id", "ClientId");

                    b.ToTable("ClientInvoices");
                });

            modelBuilder.Entity("eManager.Domain.ClientServiceDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("InvoiceId");

                    b.Property<int>("ServiceId");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("InvoiceId", "ServiceId");

                    b.ToTable("InvoiceServices");
                });

            modelBuilder.Entity("eManager.Domain.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<long>("BankAccount");

                    b.Property<string>("ContactPerson");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<long>("Phone");

                    b.Property<long>("TaxNumber");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("eManager.Domain.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActivityId");

                    b.Property<string>("Address");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<int>("Department");

                    b.Property<string>("EmployeeNumber");

                    b.Property<string>("FirstName");

                    b.Property<string>("HSafety");

                    b.Property<string>("IdCard");

                    b.Property<string>("LastName");

                    b.Property<string>("M1M2");

                    b.Property<string>("Medical");

                    b.Property<string>("Password");

                    b.Property<long>("Phone");

                    b.Property<long>("Salary");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("eManager.Domain.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClientAddress");

                    b.Property<int>("ClientId");

                    b.Property<int?>("ClientId1");

                    b.Property<int?>("ClientInvoiceId");

                    b.Property<string>("ClientName");

                    b.Property<string>("Description");

                    b.Property<DateTime>("DueDate");

                    b.Property<DateTime>("InvoiceDate");

                    b.Property<string>("InvoiceNumber");

                    b.Property<double>("PaymentPeriod");

                    b.Property<double>("Price");

                    b.Property<string>("UserId");

                    b.HasKey("InvoiceId");

                    b.HasIndex("ClientId1");

                    b.HasIndex("ClientInvoiceId");

                    b.HasIndex("UserId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("eManager.Domain.Procurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<string>("Issuer");

                    b.Property<double>("Price");

                    b.Property<int>("ProcurementStatus");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Procurements");
                });

            modelBuilder.Entity("eManager.Domain.ProcurementProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProcurementId");

                    b.Property<int>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("ProcurementId");

                    b.HasIndex("ProductId", "ProcurementId");

                    b.ToTable("ProcurementProducts");
                });

            modelBuilder.Entity("eManager.Domain.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("Name");

                    b.Property<double>("Price");

                    b.Property<int>("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("eManager.Domain.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId");

                    b.Property<int>("Currency");

                    b.Property<double>("CurrencyRate");

                    b.Property<string>("Name");

                    b.Property<double>("Price");

                    b.Property<double>("Quantity");

                    b.HasKey("ServiceId");

                    b.HasIndex("ClientId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("eManager.Domain.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FullName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new { Id = "bffb94e1-8c6a-4ef0-b872-64dd1ec9cc74", AccessFailedCount = 0, ConcurrencyStamp = "19192b76-b5c7-46d4-b77e-dc602b07139a", Email = "supplier@mail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "supplier@mail.com", NormalizedUserName = "DB_A57FCC_VPlan1985_admin", PasswordHash = "AQAAAAEAACcQAAAAEFwfraClGiLELDNq4bW/jRp8+gBGuCptZDtrCWIZJShHBoaLAYAp/fOKeJum/mgGjg==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "DB_A57FCC_VPlan1985_admin" },
                        new { Id = "408d1fa3-b202-4d88-942e-349b9124d770", AccessFailedCount = 0, ConcurrencyStamp = "ab68713e-d31e-4564-b106-6bb39457b09c", Email = "planojevic@ognootporno.com.mk", EmailConfirmed = true, FullName = "Владимир Планојевиќ", LockoutEnabled = false, NormalizedEmail = "PLANOJEVIC@OGNOOTPORNO.COM.MK", NormalizedUserName = "VPLAN", PasswordHash = "AQAAAAEAACcQAAAAENEH/pWmzYrkj/V9xu2cOMD+4JWWvrxH5fdaMePVvtf09e4vbPS5/DTmRuJEEgCnKA==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "VPlan" },
                        new { Id = "cd59e64a-bd79-49fd-9119-97ac7f7b9af3", AccessFailedCount = 0, ConcurrencyStamp = "f5a640ac-091f-406b-a70a-d2ea23993cf3", Email = "nikolchov@ognootporno.com.mk", EmailConfirmed = true, FullName = "Сашо Николчов", LockoutEnabled = false, NormalizedEmail = "nikolchov@ognootporno.com.mk", NormalizedUserName = "SASHONIKOLCHOV", PasswordHash = "AQAAAAEAACcQAAAAEGOf4Em55GRMdXLs8zYt2s8+UQ17qfoEQ2Sc7ICF/Epn7dnvdlGjiMrMIQ6a81ny0g==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "SashoNikolchov" },
                        new { Id = "589892ea-599f-44b2-a18e-e6bd7a4c98c1", AccessFailedCount = 0, ConcurrencyStamp = "8d90920b-8723-4503-a860-14a37eb6126b", Email = "peshovski@ognootporno.com.mk", EmailConfirmed = true, FullName = "Тони Пешевски", LockoutEnabled = false, NormalizedEmail = "peshovski@ognootporno.com.mk", NormalizedUserName = "TONIPESHEVSKI", PasswordHash = "AQAAAAEAACcQAAAAEMVUgLqR6pL4Z9ewVi2djZ6se9FoefNTTz8/7CT4IxGUelkzS/h70l96d104ty1IHA==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "ToniPeshevski" },
                        new { Id = "8c3918bd-10bd-4dc5-ac0a-53fadf92e988", AccessFailedCount = 0, ConcurrencyStamp = "b46d6d94-19b2-4d2b-97c8-53293b7e246e", Email = "mirkovska@ognootporno.com.mk", EmailConfirmed = true, FullName = "Ана Мирковска Гаврилов", LockoutEnabled = false, NormalizedEmail = "mirkovska@ognootporno.com.mk", NormalizedUserName = "ANAMIRKOVSKAGAVRILOV", PasswordHash = "AQAAAAEAACcQAAAAENlRt7Q0HAshWen2FoGCprN/RiFbrepiBabe9l6FsO3l6Sr60XcClIbAC3bz7NGKvw==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "AnaMGavrilov" },
                        new { Id = "628e3958-277b-4810-ad1f-ec6cbb9f6543", AccessFailedCount = 0, ConcurrencyStamp = "cb16cfc7-9483-4b0a-a5c1-19de43f0e508", Email = "nikolchov@ognootporno.com.mk", EmailConfirmed = true, FullName = "Евтим Николчов", LockoutEnabled = false, NormalizedEmail = "nikolchov@ognootporno.com.mk", NormalizedUserName = "EVTIMNIKOLCHOV", PasswordHash = "AQAAAAEAACcQAAAAEL3ns8qdnCzn7vgKpmyuxsycQdAnwAx1o80/ChORWOzjNXx45hhjPoY+TnjJY4qpKQ==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "EvtimNikolchov" },
                        new { Id = "619a7138-26b0-4109-83e4-56791a324cf1", AccessFailedCount = 0, ConcurrencyStamp = "db57be36-c242-4cf3-a840-88da8421f40e", Email = "peshovski@ognootporno.com.mk", EmailConfirmed = true, FullName = "Сашо Пешовски", LockoutEnabled = false, NormalizedEmail = "peshovski@ognootporno.com.mk", NormalizedUserName = "SASHOPESHOVSKI", PasswordHash = "AQAAAAEAACcQAAAAEDUkZf8cjqoVN0qG/dqgXpXorBaccOW1tJePgsRwt97QW53JWBw2GNsYvzAXqbuk7Q==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "SashoPeshovski" },
                        new { Id = "04ae630f-f150-4376-8aa2-58ddbdff16f4", AccessFailedCount = 0, ConcurrencyStamp = "8b1a67ed-7ee3-4a26-bebf-a55b7135855d", Email = "kotev@ognootporno.com.mk", EmailConfirmed = true, FullName = "Горан Котев", LockoutEnabled = false, NormalizedEmail = "kotev@ognootporno.com.mk", NormalizedUserName = "GORANKOTEV", PasswordHash = "AQAAAAEAACcQAAAAEKZd5k6EdI4d1IbNgFDY3BHKeGvZIhqeI5DHsiIp21OcNySRFL1JGBhVwgDHTKD6sA==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "GoranKotev" },
                        new { Id = "edb32e55-3157-47f8-a362-42b98742b03b", AccessFailedCount = 0, ConcurrencyStamp = "38ac9bce-a2ba-49e6-aded-19924da46bca", Email = "kotev@ognootporno.com.mk", EmailConfirmed = true, FullName = "Коста Котев", LockoutEnabled = false, NormalizedEmail = "kotev@ognootporno.com.mk", NormalizedUserName = "KOSTAKOTEV", PasswordHash = "AQAAAAEAACcQAAAAEBZNBKGMJroSRFaxdR36Zt0W0GajQzZcOR09Jch/vB1ickl/uL5SomHoOZfovDnpqw==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "KostaKotev" },
                        new { Id = "3bfa5fbc-9068-4c1c-bb40-17e06150cca9", AccessFailedCount = 0, ConcurrencyStamp = "d306ea94-fb78-4c69-9695-e5717da45b77", Email = "kotev@ognootporno.com.mk", EmailConfirmed = true, FullName = "Драге Ристевски", LockoutEnabled = false, NormalizedEmail = "kotev@ognootporno.com.mk", NormalizedUserName = "DRAGERISTEVSKI", PasswordHash = "AQAAAAEAACcQAAAAEAfSTRVY+cDSextKEAlag2JUXOQpG7w82EYNRazPaK4psrF3vm5wfhMRqc4VAKqhSQ==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "DrageRistevski" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new { Id = "8f6dedc5-21a7-4b2a-b29e-be975ac725b1", ConcurrencyStamp = "41daf1b8-a46e-4fa1-9450-d4fd1c0ab740", Name = "admin", NormalizedName = "ADMIN" },
                        new { Id = "cd9da9f8-b54d-4948-b069-e3a9d914bb12", ConcurrencyStamp = "058321de-80fd-4129-91f1-889ce9f66187", Name = "userVP", NormalizedName = "USERVP" },
                        new { Id = "6f8c54d6-e093-4228-95c5-999303eb3fa2", ConcurrencyStamp = "5321dfe0-dc0d-43e4-9010-47a90afc3205", Name = "userSN", NormalizedName = "USERSN" },
                        new { Id = "25721278-4863-4b8c-aecb-d395e9dc1938", ConcurrencyStamp = "6d7c4032-412d-49d3-9a4e-07e52382dcf8", Name = "userTP", NormalizedName = "USERTP" },
                        new { Id = "5f8a6ce5-e648-496a-ba9a-8f0970072457", ConcurrencyStamp = "6af09664-5800-4611-bcf5-232e808a79d6", Name = "userAMG", NormalizedName = "USERAMG" },
                        new { Id = "992210eb-ed3c-44d5-9f06-bfbd27d17cfb", ConcurrencyStamp = "0a119f7d-2fd1-4e0c-a06a-896745e86bee", Name = "userEN", NormalizedName = "USEREN" },
                        new { Id = "3dd730c7-99dc-4b96-abfb-2b43beb49ab6", ConcurrencyStamp = "7218df06-1b80-4d9f-854a-427fd53f45c5", Name = "userSP", NormalizedName = "USERSP" },
                        new { Id = "654b93dd-94f6-4982-aa24-9829cb05d610", ConcurrencyStamp = "83b65f3b-8d14-45e5-9e49-00791fae98e8", Name = "userGK", NormalizedName = "USERGK" },
                        new { Id = "f7e9146a-2cbd-4159-bd5e-cd55b86eb065", ConcurrencyStamp = "1e4c0a5d-35fb-4e80-8ab5-c55b9a13dd11", Name = "userKK", NormalizedName = "USERKK" },
                        new { Id = "75f60987-fd94-4455-b856-29b0725fe15a", ConcurrencyStamp = "8d526a40-ec43-4c0a-8cdd-be18b884e551", Name = "userDR", NormalizedName = "USERDR" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new { UserId = "bffb94e1-8c6a-4ef0-b872-64dd1ec9cc74", RoleId = "8f6dedc5-21a7-4b2a-b29e-be975ac725b1" },
                        new { UserId = "408d1fa3-b202-4d88-942e-349b9124d770", RoleId = "cd9da9f8-b54d-4948-b069-e3a9d914bb12" },
                        new { UserId = "cd59e64a-bd79-49fd-9119-97ac7f7b9af3", RoleId = "6f8c54d6-e093-4228-95c5-999303eb3fa2" },
                        new { UserId = "589892ea-599f-44b2-a18e-e6bd7a4c98c1", RoleId = "25721278-4863-4b8c-aecb-d395e9dc1938" },
                        new { UserId = "8c3918bd-10bd-4dc5-ac0a-53fadf92e988", RoleId = "5f8a6ce5-e648-496a-ba9a-8f0970072457" },
                        new { UserId = "628e3958-277b-4810-ad1f-ec6cbb9f6543", RoleId = "992210eb-ed3c-44d5-9f06-bfbd27d17cfb" },
                        new { UserId = "04ae630f-f150-4376-8aa2-58ddbdff16f4", RoleId = "654b93dd-94f6-4982-aa24-9829cb05d610" },
                        new { UserId = "edb32e55-3157-47f8-a362-42b98742b03b", RoleId = "f7e9146a-2cbd-4159-bd5e-cd55b86eb065" },
                        new { UserId = "3bfa5fbc-9068-4c1c-bb40-17e06150cca9", RoleId = "75f60987-fd94-4455-b856-29b0725fe15a" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("eManager.Domain.Activity", b =>
                {
                    b.HasOne("eManager.Domain.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("eManager.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("eManager.Domain.ActivityEmployee", b =>
                {
                    b.HasOne("eManager.Domain.Activity", "Activity")
                        .WithMany("EmployeeActivities")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eManager.Domain.Employee", "Employee")
                        .WithMany("EmployeeActivities")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eManager.Domain.Client", b =>
                {
                    b.HasOne("eManager.Domain.ClientInvoice")
                        .WithMany("Clients")
                        .HasForeignKey("ClientInvoiceId");
                });

            modelBuilder.Entity("eManager.Domain.ClientInvoice", b =>
                {
                    b.HasOne("eManager.Domain.Client", "Client")
                        .WithMany("ClientInvoices")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eManager.Domain.Invoice", "Invoice")
                        .WithMany("ClientInvoices")
                        .HasForeignKey("Invoice_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eManager.Domain.Service")
                        .WithMany("ClientInvoices")
                        .HasForeignKey("ServiceId");
                });

            modelBuilder.Entity("eManager.Domain.ClientServiceDTO", b =>
                {
                    b.HasOne("eManager.Domain.Invoice", "Invoice")
                        .WithMany("InvoiceServices")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eManager.Domain.Service", "Service")
                        .WithMany("InvoiceServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eManager.Domain.Employee", b =>
                {
                    b.HasOne("eManager.Domain.Activity")
                        .WithMany("allEmployees")
                        .HasForeignKey("ActivityId");
                });

            modelBuilder.Entity("eManager.Domain.Invoice", b =>
                {
                    b.HasOne("eManager.Domain.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId1");

                    b.HasOne("eManager.Domain.ClientInvoice")
                        .WithMany("Invoices")
                        .HasForeignKey("ClientInvoiceId");

                    b.HasOne("eManager.Domain.User", "User")
                        .WithMany("Invoices")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("eManager.Domain.Procurement", b =>
                {
                    b.HasOne("eManager.Domain.User", "User")
                        .WithMany("Procurements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eManager.Domain.ProcurementProduct", b =>
                {
                    b.HasOne("eManager.Domain.Procurement", "Procurement")
                        .WithMany("ProcurementProducts")
                        .HasForeignKey("ProcurementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eManager.Domain.Product", "Product")
                        .WithMany("ProcurementProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eManager.Domain.Product", b =>
                {
                    b.HasOne("eManager.Domain.Company", "Company")
                        .WithMany("CompanyProducts")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eManager.Domain.Service", b =>
                {
                    b.HasOne("eManager.Domain.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("eManager.Domain.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("eManager.Domain.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eManager.Domain.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("eManager.Domain.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
